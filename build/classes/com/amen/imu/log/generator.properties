#
#   OBJA\u015aNIENIE:
#
#   Tutaj znajduja sie infrmacje dotyczace sposobu logowania bledow i informacji pochodzacych z systemu.
#   Znajdzie sie sekcja tego co chcesz, a czego nie chcesz wypisywac, a takze co gdzie ma byc wypisywane.
#
#   Poniewaz zawsze istnieje problem kwestii logow, tutaj znajduje sie konfiguracja, ktora pozwoli zapobiec ich 'ZNIKANIU'.
#
#   DLA PROGRAMIST\u00d3W: Metody ktore powstaly sa przede wszystkim krotkie - nie wymgaja wywolywania 100 loggerow, proszenia o miliard
#                       sryliardow loggerow wiecej, a potem jeszcze podac log level, dopisac klase, zdefiniowac czy chcemy cos wypisac
#                       czy nie, a to zasranstwo i tak wypisze co mu sie spodoba  - albo to ty zapomnisz dopisac stack trace, czy
#                       cokolwiek innego...

#               Error(getClass(), ....
#               Warn(getClass(), ...
#               Info(getClass(), ...
#               Debug(getClass(), ...  [dodam, ze to powinno byc praktycznie na kazdym stopniu -
#                                          jesli ktos nie uruchomi debuga to ma tylko bledy, kto chce debuga i nie chce Twojego
#                                           shitu na ekranie, to sobie wlaczy tego ignorowanie w sekcji nizej]
#               Fatal(getClass(), ...


#               Reminder(); --to jest metoda wypisujaca do logow , ze czegos zapomnielismy zrobic ,albo bedziemy to robic\u00a0i ma nam o tym
#                           przypominac osooba czytajaca logi! nie czaj sie tylko to wstaw gdzie trzeba, bo po\u017aniej bedzie problem jak sie o
#                           czyms zapomni...

#######################################################################################################################################

log.level=3
                        # im ni\u017csza tym gorsza , zakres nieokre\u015blony
log.debug=
                        #true/false
log.ignore_=true
                        #paczka;paczka;paczka;paczka [na koncu moze ale nie musi byc\u00a0srednik]
log.ignore.class=
                        #klasa;klasa;klasa
log.ignore.package=
                        #paczka;paczka;paczka

log.max.filesize=1MB
log.max.backupindex=1

log.type=org.apache.log4j.RollingFileAppender
log.layout_=org.apache.log4j.PatternLayout
log.layout.pattern=%d [%t] %-5p %c:%M:%L - %m%n

#tutaj wyglada to tak- to sa paczki, ktore sa sprawdzane bezposrednio w sposob nastepujacy:
#                               -to paczka polozona w com.iot.@PACZKA,
#                               -to jest pacza polozona w @PACZKA
#                       Gdzie @PACZKA to element pomiedzy srednikami.
#                       Kazdy z nich dostanie nowy plik.
log.loggers=com.amen;
log.noconsole=
#To nie b\u0119dzie logowane w konsoli , ale p\u00f3jdzie do pliku. np. common

#PLIK z logiem automatycznie jest generowany. \u017beby nie generowal sie za kazdym razem, postanowilem, 
# ze najprosciej bedzie, ze bedzie sie generowal dopiero
# gdy plik znajdzie sie w [~| /Smart/ |~], a po wygenerowaniu, ja przeniose go do [~| /Smart/log/ |~]
# stworze tez folder itd. Wazne, abys mi nadal prawo do tworzenia, lub prawo wlasnosci w tym katalogu.

